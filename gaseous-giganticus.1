.TH GASEOUS-GIGANGICUS 1 "May 2014" "Space-Nerds-In-Space" "User Commands"

.SH NAME
gaseous-giganticus \- make 6 images forming a cube map for a gas giant planet 
.SH SYNOPSIS
.B gaseous-giganticus 
[ -b bands ]
[ -B band-velocity-factor ]
[ -c count ]
[ -C ]
[ -d velocity-field-dumpfile ]
[ -f fbm-falloff ]
[ -h ]
[ -H ]
[ -i input-file ]
[ -n ]
[ -o output-file-template ]
[ -p particle-count ]
[ -r velocity-field-dumpfile ]
[ -s stripe ]
[ -t thread-count ]
[ -v velocity-factor ]
[ -V ]
[ -w w-offset ]
[ -W wstep ]
[ -z noise-scale ]

.SH DESCRIPTION
.I  gaseous-giganticus
From a given input image, produces 6 images forming a cube map
for a gas giant planet.  
.PP
It works as follows.  6 square arrays
are arranged in a cube.  The cube is positioned within a 4 dimensional
Simplex noise field.   For each element in each of the 6 arrays, the
gradient in 3 dimensions is taken, forming a 3D vector.  The curl 
of this gradient field relative to the surface of a sphere enclosing the
cube is taken.  That is, each gradient vector is projected onto
the surface of a sphere enclosing the cube.  Depending on whether the
original gradient vector was "uphill" or "downhill" relative to the
surface of the sphere (pointing more away from or towards the center
of the sphere) the gradient vector is turned 90 degrees left or right,
respectively, within the plane tangent to the surface of the sphere
at that point.  This will produce a non-divergent velocity field which
can be used as a kind of fake incompressible fluid flow simulation.
Then, the velocity field is modified to add counter rotating bands.
.PP
Next, regions of the input image are mapped to the faces of the cube
(which is mapped to a sphere) Particles are randomly distributed onto
the surface of the sphere, and they are colored according to the
color of the image at the corresponding mapped location.  Then, the
particles are moved according to the velocity field.  At each iteration
the particles are projected into 6 images according to their position.
Also each image is very slightly faded towards the darkest color present
in the input image at each iteration -- this has the effect that the moving
particles leave fading trails on the images.  With enough particles the
fading trails are not visible, except in the small cracks where some small
divergences remain (this last may be due to some bug in the program.)
.SH OPTIONS
.TP
-b, --bands 
Number of counter rotating bands.  Default is 6.0
.TP
-c, --count
Number of iterations to run the simulation.  Default is 1000
.TP
-C, --cloudmode
modulate output images to produce clouds
.TP
-d, --dump-velocity-field
Dump out velocity field data to the specified file after initial calculation.
.TP
-i, --input
Input image filename.  Must be RGB png file.
.TP
-o, --output
Output image filename template.  Example: 'out-' will
produces 6 output files, out-0.png, out-1.png, ..., out-5.png
.TP
-w, --w-offset
w dimension offset in 4D simplex noise field Use -w to avoid (or obtain)
repetitive results.
.TP
-W, --wstep amount
w offset is periodically adjusted by specified amount and velocity field
is periodically recalculated.
.TP
-f, --fbm-falloff value
Successively higher octaves of fractal Brownian motion noise are multiplied
by this value.  Default is 0.5.   So for example, the lowest octave of noise
is multiplied by 1.0, the 2nd octave by 0.5, the 3rd by 0.25, and the fourth
(last) by 0.125.  If fbm-falloff is specfied as 0.4, then the lowest octave
is multiplied by 1.0, the next by 0.4, the next by 0.16 and the last by 0.064.
.TP
-h, --hot-pink
Gradually fade pixels to hot pink.  This will allow
divergences in the velocity field to be clearly seen,
as pixels that contain no particles will not be painted
and will become hot pink.
.TP
-H, --help
Print a help message and exit.
.TP
-n, --no-fade
Do not fade the image at all, divergences will be hidden
.TP
-p, --particle-count
Use specified number of particles.  Default is 8000000.
.TP
-v, --velocity-factor: 
Multiply velocity field by this number when
moving particles.  Default is 1200.0
.TP
-B, --band-vel-factor:
Multiply band velocity by this number when
computing velocity field.  Default is 2.9
.TP
-V, --vertical-bands
Make bands rotate around the Y axis instead of X axis
.TP
-r, --restore-velocity-field
Restore the velocity field data from a file created previously via the -d option
instead of calculating it from scratch.  This can save a lot of time if you are
happy with the fluid flows, but are experimenting with different input images.
.TP
-s, --stripe
Instead of using the whole image, use a vertical strip of the image (center) and
initialize particle colors to begin the simulation with stripes.  -V option affects
the orientation of the stripes.  Mutually exclusive with --sinusoidal option.
.TP
-S, --sinusoidal
Use sinusoidal projection of input image for initial coloring of particles.
-V option affects the orientation.  Mutually exclusive with --stripe option.
.TP
-t, --threads
Use the specified number of CPU threads up to the
number of online CPUs.  Default is number of online CPUs.
.TP
-z, --noise-scale noisescale
Use the specified noise scale value.  Default is 2.6  This controls the
amount of the Simplex noise field that is sampled.  Smaller values will
give bigger whorls, larger values will give smaller whorls.
.SH "EXAMPLES"
.TP
.DI
	./gaseous-giganticus --sinusoidal --noise-scale 2.8 --velocity-factor 800 -i ~/image.png -w 809.1 --bands 10
.DE
.SH "SEE ALSO"
snis_client, snis_server

